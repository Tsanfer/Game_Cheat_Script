<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <Forms>
    <CETrainer Class="TTrainerForm" Encoding="Ascii85">t(:fM!!Q)vorKg$3Jfe12E?:2RTTq!F_9zV*QU!QL=%2ME3RERE,Fo}RX7cY.0V{hn=M8u5;sS9],wj2th^.%#p6MDJB{4*0?OgNc{V*{*z%OmwD.}dE]iNb=VUJYEEk=_^3+NFsrTmW@b+Y.fk;g1/T(gLddFe16qwM3W;Pe(v}9u{2wi41SL.obPb8OWtKDv,oeRj;OvG#s/MEaI91To/r;J9]?M,34.E@C*:76K)W3rO0F%pwhKH/Hx:dB(c=ge9,GYf:w7jlv*06_Q1P_:VKZ$Rai6]yvxowH6CHDl5zDJ0pse6D6Hbhv13!*.j@E-GF4J#L[{Pr2F0J(}kR/xQVvX4#.by@LvgZSMxuBx@0[sPq*A,8pOg5tz_ZDrSHWszFMMRVj$,-ALVoauGtI!98D@JQ0]!Q*TqjSdWT[,jZ*(0p%-?ptsa:!d?V)Ue074KdFst.{]E(Jex+Ep]vlnH,k!,h-5$8YyFeG:GtCj8ddrZ;-sE5-Jko[UuaMKF7N}WMPOvZY6e;sQrW7e)EO9:69</CETrainer>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Sun man pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : popcapgame1.exe
  Version: 
  Date   : 2022-07-10
  Author : Admin

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,popcapgame1.exe,8B 87 78 55 00 00) // should be unique
alloc(newmem,1024,INJECT) // 分配 1024 字节个内存，用于代码注入
alloc(pointer_sun,16) // 动态分配内存，用于存放3个人造指针

// 注册全局符号
registersymbol(INJECT)
registersymbol(pointer_sun) // 人造指针

// 声明标号
label(original_code)
label(return)
label(restore_reg)

// 注入代码段
newmem:
  pushfd // 保存所有标志位
  push eax // ebx 压栈保存,为后续操作腾出一个寄存器
  mov eax,edi
  add eax,5578
  mov [pointer_sun],eax

// 恢复临时使用的寄存器的值
restore_reg:
  pop eax
  popfd  // 还原所有标志位
  jmp original_code

original_code:
  mov eax,[edi+00005578]
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 8B 87 78 55 00 00

// 注销全局符号
unregistersymbol(INJECT)
unregistersymbol(pointer_sun)
// 释放内存
dealloc(newmem)
dealloc(pointer_sun)

{
// ORIGINAL CODE - INJECTION POINT: popcapgame1.exe+97EB5

popcapgame1.exe+97E94: 6A FE              - push -02
popcapgame1.exe+97E96: 68 BD 00 00 00     - push 000000BD
popcapgame1.exe+97E9B: 50                 - push eax
popcapgame1.exe+97E9C: 8B CE              - mov ecx,esi
popcapgame1.exe+97E9E: E8 DD 72 10 00     - call popcapgame1.exe+19F180
popcapgame1.exe+97EA3: 8B 7D 04           - mov edi,[ebp+04]
popcapgame1.exe+97EA6: 8B C7              - mov eax,edi
popcapgame1.exe+97EA8: E8 53 7B F8 FF     - call popcapgame1.exe+1FA00
popcapgame1.exe+97EAD: 84 C0              - test al,al
popcapgame1.exe+97EAF: 0F 85 1D 01 00 00  - jne popcapgame1.exe+97FD2
// ---------- INJECTING HERE ----------
popcapgame1.exe+97EB5: 8B 87 78 55 00 00  - mov eax,[edi+00005578]
// ---------- DONE INJECTING  ----------
popcapgame1.exe+97EBB: 33 C9              - xor ecx,ecx
popcapgame1.exe+97EBD: 85 C0              - test eax,eax
popcapgame1.exe+97EBF: 0F 9E C1           - setle cl
popcapgame1.exe+97EC2: 8D 54 24 5C        - lea edx,[esp+5C]
popcapgame1.exe+97EC6: 49                 - dec ecx
popcapgame1.exe+97EC7: 23 C1              - and eax,ecx
popcapgame1.exe+97EC9: 50                 - push eax
popcapgame1.exe+97ECA: 68 50 DB 6E 00     - push popcapgame1.exe+2EDB50
popcapgame1.exe+97ECF: 52                 - push edx
popcapgame1.exe+97ED0: E8 3B F1 16 00     - call popcapgame1.exe+207010
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Sun"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pointer_sun</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Coin man pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : popcapgame1.exe
  Version: 
  Date   : 2022-07-10
  Author : Admin

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
 
aobscanmodule(INJECT,popcapgame1.exe,8B 51 54 52 8D 44 24 30) // should be unique
alloc(newmem,1024,INJECT) // 分配 1024 字节个内存，用于代码注入
alloc(pointer_coin,8) // 动态分配内存，用于存放1个人造指针

// 注册全局符号
registersymbol(INJECT)
registersymbol(pointer_coin) // 人造指针

// 声明标号
label(original_code)
label(return)
label(restore_reg)

// 注入代码段
newmem:
  pushfd // 保存所有标志位
  push eax // eax 压栈保存,为后续操作腾出一个寄存器
  mov eax,ecx
  add eax,54
  mov [pointer_coin],eax

// 恢复临时使用的寄存器的值
restore_reg:
  pop eax
  popfd  // 还原所有标志位
  jmp original_code

original_code:
  mov edx,[ecx+54]
  push edx
  lea eax,[esp+30]
  jmp return

INJECT:
  jmp newmem
  nop 3
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 8B 51 54 52 8D 44 24 30

// 注销全局符号
unregistersymbol(INJECT)
unregistersymbol(pointer_coin)
// 释放内存
dealloc(newmem)
dealloc(pointer_coin)

{
// ORIGINAL CODE - INJECTION POINT: popcapgame1.exe+1DC74

popcapgame1.exe+1DC4D: E8 4E 7F 13 00           - call popcapgame1.exe+155BA0
popcapgame1.exe+1DC52: 50                       - push eax
popcapgame1.exe+1DC53: 8B CF                    - mov ecx,edi
popcapgame1.exe+1DC55: E8 16 0E 18 00           - call popcapgame1.exe+19EA70
popcapgame1.exe+1DC5A: 8B 15 E4 ED 72 00        - mov edx,[popcapgame1.exe+32EDE4]
popcapgame1.exe+1DC60: 52                       - push edx
popcapgame1.exe+1DC61: 8B CF                    - mov ecx,edi
popcapgame1.exe+1DC63: E8 E8 0D 18 00           - call popcapgame1.exe+19EA50
popcapgame1.exe+1DC68: 8B 85 A4 00 00 00        - mov eax,[ebp+000000A4]
popcapgame1.exe+1DC6E: 8B 88 4C 09 00 00        - mov ecx,[eax+0000094C]
// ---------- INJECTING HERE ----------
popcapgame1.exe+1DC74: 8B 51 54                 - mov edx,[ecx+54]
// ---------- DONE INJECTING  ----------
popcapgame1.exe+1DC77: 52                       - push edx
popcapgame1.exe+1DC78: 8D 44 24 30              - lea eax,[esp+30]
popcapgame1.exe+1DC7C: 50                       - push eax
popcapgame1.exe+1DC7D: E8 6E DA 03 00           - call popcapgame1.exe+5B6F0
popcapgame1.exe+1DC82: C7 44 24 54 00 00 00 00  - mov [esp+54],00000000
popcapgame1.exe+1DC8A: 8B 0D E4 ED 72 00        - mov ecx,[popcapgame1.exe+32EDE4]
popcapgame1.exe+1DC90: 8B 11                    - mov edx,[ecx]
popcapgame1.exe+1DC92: 8B 52 1C                 - mov edx,[edx+1C]
popcapgame1.exe+1DC95: 8D 44 24 2C              - lea eax,[esp+2C]
popcapgame1.exe+1DC99: 50                       - push eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Coin"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>man_pointer_coin</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"无CD"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : popcapgame1.exe
  Version: 
  Date   : 2022-07-11
  Author : Admin
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

aobscanmodule(INJECT,popcapgame1.exe,FF 47 24 8B 47 24) // should be unique
alloc(newmem,1024,INJECT) // 分配 1024 字节个内存，用于代码注入

// 注册全局符号
registersymbol(INJECT)

// 声明标号
label(original_code)
label(return)
label(restore_reg)

// 注入代码段
newmem:
  pushfd // 保存所有标志位
  // 方法一 将冷却标志位置1（0：冷却未完成，1：冷却完成）
  mov byte [edi+48],1
  // 方法二 一次补充满 CD 值
  // push eax // eax 压栈保存,为后续操作腾出一个寄存器
  // mov eax,[edi+28] // 将恢复所需的总 CD 值地址给寄存器
  // mov [edi+24],eax // 将寄存器中的地址给当前 CD 值

// 恢复临时使用的寄存器的值
restore_reg:
  // pop eax
  popfd  // 还原所有标志位
  jmp original_code

original_code:
  inc [edi+24]
  mov eax,[edi+24]
  jmp return

INJECT:
  jmp newmem
  nop
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db FF 47 24 8B 47 24

// 注销全局符号
unregistersymbol(INJECT)
// 释放内存
dealloc(newmem)


{
// ORIGINAL CODE - INJECTION POINT: popcapgame1.exe+958BC

popcapgame1.exe+95895: 83 7F 34 FF           - cmp dword ptr [edi+34],-01
popcapgame1.exe+95899: 0F 84 05 01 00 00     - je popcapgame1.exe+959A4
popcapgame1.exe+9589F: 8B 4F 04              - mov ecx,[edi+04]
popcapgame1.exe+958A2: 83 B9 80 55 00 00 00  - cmp dword ptr [ecx+00005580],00
popcapgame1.exe+958A9: 75 05                 - jne popcapgame1.exe+958B0
popcapgame1.exe+958AB: E8 10 FF FF FF        - call popcapgame1.exe+957C0
popcapgame1.exe+958B0: 80 7F 48 00           - cmp byte ptr [edi+48],00
popcapgame1.exe+958B4: 75 25                 - jne popcapgame1.exe+958DB
popcapgame1.exe+958B6: 80 7F 49 00           - cmp byte ptr [edi+49],00
popcapgame1.exe+958BA: 74 1F                 - je popcapgame1.exe+958DB
// ---------- INJECTING HERE ----------
popcapgame1.exe+958BC: FF 47 24              - inc [edi+24]
// ---------- DONE INJECTING  ----------
popcapgame1.exe+958BF: 8B 47 24              - mov eax,[edi+24]
popcapgame1.exe+958C2: 3B 47 28              - cmp eax,[edi+28]
popcapgame1.exe+958C5: 7E 14                 - jle popcapgame1.exe+958DB
popcapgame1.exe+958C7: C7 47 24 00 00 00 00  - mov [edi+24],00000000
popcapgame1.exe+958CE: C6 47 49 00           - mov byte ptr [edi+49],00
popcapgame1.exe+958D2: C6 47 48 01           - mov byte ptr [edi+48],01
popcapgame1.exe+958D6: E8 E5 FE FF FF        - call popcapgame1.exe+957C0
popcapgame1.exe+958DB: 8B 47 3C              - mov eax,[edi+3C]
popcapgame1.exe+958DE: 85 C0                 - test eax,eax
popcapgame1.exe+958E0: 0F 8E BE 00 00 00     - jng popcapgame1.exe+959A4
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Coin_base"</Description>
      <LastState Value="100" RealAddress="181A849C"/>
      <VariableType>4 Bytes</VariableType>
      <Address>"popcapgame1.exe"+0013A90C</Address>
      <Offsets>
        <Offset>84</Offset>
        <Offset>4</Offset>
        <Offset>74</Offset>
        <Offset>708</Offset>
      </Offsets>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>-- debug 检测配置
if os.getenv('LOCAL_LUA_DEBUGGER_VSCODE') == '1' then
    require('lldebugger').start()
    require('lldebugger').start()
end

tb = getAddressList()

Script = {}
function Script:new(script_name, enable)
    local t = {}
    setmetatable(t, self)
    self.__index = self
    t.enable = enable or false
    if script_name == 'sun' then
        t.script = tb.getMemoryRecordByDescription('Sun man pointer')
    elseif script_name == 'coin' then
        t.script = tb.getMemoryRecordByDescription('Coin man pointer')
    else
        error('请填写有效的脚本名称')
    end
    return t
end

--- 使能脚本
function Script:Enable()
    self.enable = true
    self.script.Active = true
end

--- 关闭脚本
function Script:Disable()
    self.enable = false
    self.script.Active = false
end

--- 翻转脚本使能状态
function Script:Toggle()
    if self.enable then
        self:Disable()
    else
        self:Enable()
    end
end

function CETrainer_SunWriteClick(sender)
    writeInteger('[pointer_sun]', 1)
end

function CETrainer_CoinWriteClick(sender)
    writeInteger('[pointer_coin]', 1)
end

function CETrainer_EnableSunChange(sender)
    script_sun:Toggle()
end

function CETrainer_EnableCoinChange(sender)
    script_coin:Toggle()
end

script_sun = Script:new('sun')
script_coin = Script:new('coin')
</LuaScript>
</CheatTable>
