<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <Forms>
    <CETrainer Class="TTrainerForm" Encoding="Ascii85">t)41-):Zf/ousLgbY=(ZL16*1bcw2p1@bR@H6vAO*kbuQJgKL#;e]j#)h)2FtFYlAcm)X,JdHX,NUS2=^[}yBNq*8fi06}xMI1^@Igt_}cOe;:qt:w%EAN-vz9DpzD)^2i#bWPq$6wL4O1(S;/tS0}8$p6ADHsgL9N#grJaCBcUQxl?Hthm2O1P?CI;oq)?^wRdw*+])xcp2qy5TY1k??]AeTXJHe}[/3n6On!6?fF3n8+l;?]uh!w)S^Trs4:,*HT1FhRj=r7a27]?M/rXi6n$0U7W}hil$$P%nU31I2aB-4Thi-qcKWJvb]1$wx=W(3rZVq+T]?_=ZO^14Gn$F@gJB#Bo#92[.^.[ZM-#yA;J.]+#PTgrNj:?o{!^mFFWu,x0YhQA?GfDq@2mAf+9Y./eEqq01#@2;x0hYf!=r@T2F*ZU4C([P7@l3tN.l^2PKyDI_:R0;8##SR/5.Q[{cPRh4KYU/A4*,Wmibh@Y+(]$zG=lm+[%P-]l1;![oBTKK2*y9Zw7V4gN*7WWpK-yB4V}*llf2Dtxveczw)7@@1(6;^+Y*Cp:at(rL{0QHquH-V!w]HBGfn!Cn=l7i1@QA3)6RIG)4w]3v2v@7e_TUX@7T]@{3yE!qV2@+8Yc</CETrainer>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"SunFindPointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : popcapgame1.exe
  Version: 
  Date   : 2022-07-10
  Author : Admin

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,popcapgame1.exe,8B 87 78 55 00 00) // should be unique
alloc(newmem,1024,INJECT) // 分配 1024 字节个内存，用于代码注入
alloc(pointer_sun,16) // 动态分配内存，用于存放3个人造指针

// 注册全局符号
registersymbol(INJECT)
registersymbol(pointer_sun) // 人造指针

// 声明标号
label(original_code)
label(return)
label(restore_reg)

// 注入代码段
newmem:
  pushfd // 保存所有标志位
  push eax // ebx 压栈保存,为后续操作腾出一个寄存器
  mov eax,edi
  add eax,5578
  mov [pointer_sun],eax

// 恢复临时使用的寄存器的值
restore_reg:
  pop eax
  popfd  // 还原所有标志位
  jmp original_code

original_code:
  mov eax,[edi+00005578]
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 8B 87 78 55 00 00

// 注销全局符号
unregistersymbol(INJECT)
unregistersymbol(pointer_sun)
// 释放内存
dealloc(newmem)
dealloc(pointer_sun)

{
// ORIGINAL CODE - INJECTION POINT: popcapgame1.exe+97EB5

popcapgame1.exe+97E94: 6A FE              - push -02
popcapgame1.exe+97E96: 68 BD 00 00 00     - push 000000BD
popcapgame1.exe+97E9B: 50                 - push eax
popcapgame1.exe+97E9C: 8B CE              - mov ecx,esi
popcapgame1.exe+97E9E: E8 DD 72 10 00     - call popcapgame1.exe+19F180
popcapgame1.exe+97EA3: 8B 7D 04           - mov edi,[ebp+04]
popcapgame1.exe+97EA6: 8B C7              - mov eax,edi
popcapgame1.exe+97EA8: E8 53 7B F8 FF     - call popcapgame1.exe+1FA00
popcapgame1.exe+97EAD: 84 C0              - test al,al
popcapgame1.exe+97EAF: 0F 85 1D 01 00 00  - jne popcapgame1.exe+97FD2
// ---------- INJECTING HERE ----------
popcapgame1.exe+97EB5: 8B 87 78 55 00 00  - mov eax,[edi+00005578]
// ---------- DONE INJECTING  ----------
popcapgame1.exe+97EBB: 33 C9              - xor ecx,ecx
popcapgame1.exe+97EBD: 85 C0              - test eax,eax
popcapgame1.exe+97EBF: 0F 9E C1           - setle cl
popcapgame1.exe+97EC2: 8D 54 24 5C        - lea edx,[esp+5C]
popcapgame1.exe+97EC6: 49                 - dec ecx
popcapgame1.exe+97EC7: 23 C1              - and eax,ecx
popcapgame1.exe+97EC9: 50                 - push eax
popcapgame1.exe+97ECA: 68 50 DB 6E 00     - push popcapgame1.exe+2EDB50
popcapgame1.exe+97ECF: 52                 - push edx
popcapgame1.exe+97ED0: E8 3B F1 16 00     - call popcapgame1.exe+207010
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Sun"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pointer_sun</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"CoinFindPointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : popcapgame1.exe
  Version: 
  Date   : 2022-07-10
  Author : Admin

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
 
aobscanmodule(INJECT,popcapgame1.exe,8B 51 54 52 8D 44 24 30) // should be unique
alloc(newmem,1024,INJECT) // 分配 1024 字节个内存，用于代码注入
alloc(pointer_coin,8) // 动态分配内存，用于存放1个人造指针

// 注册全局符号
registersymbol(INJECT)
registersymbol(pointer_coin) // 人造指针

// 声明标号
label(original_code)
label(return)
label(restore_reg)

// 注入代码段
newmem:
  pushfd // 保存所有标志位
  push eax // eax 压栈保存,为后续操作腾出一个寄存器
  mov eax,ecx
  add eax,54
  mov [pointer_coin],eax

// 恢复临时使用的寄存器的值
restore_reg:
  pop eax
  popfd  // 还原所有标志位
  jmp original_code

original_code:
  mov edx,[ecx+54]
  push edx
  lea eax,[esp+30]
  jmp return

INJECT:
  jmp newmem
  nop 3
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 8B 51 54 52 8D 44 24 30

// 注销全局符号
unregistersymbol(INJECT)
unregistersymbol(pointer_coin)
// 释放内存
dealloc(newmem)
dealloc(pointer_coin)

{
// ORIGINAL CODE - INJECTION POINT: popcapgame1.exe+1DC74

popcapgame1.exe+1DC4D: E8 4E 7F 13 00           - call popcapgame1.exe+155BA0
popcapgame1.exe+1DC52: 50                       - push eax
popcapgame1.exe+1DC53: 8B CF                    - mov ecx,edi
popcapgame1.exe+1DC55: E8 16 0E 18 00           - call popcapgame1.exe+19EA70
popcapgame1.exe+1DC5A: 8B 15 E4 ED 72 00        - mov edx,[popcapgame1.exe+32EDE4]
popcapgame1.exe+1DC60: 52                       - push edx
popcapgame1.exe+1DC61: 8B CF                    - mov ecx,edi
popcapgame1.exe+1DC63: E8 E8 0D 18 00           - call popcapgame1.exe+19EA50
popcapgame1.exe+1DC68: 8B 85 A4 00 00 00        - mov eax,[ebp+000000A4]
popcapgame1.exe+1DC6E: 8B 88 4C 09 00 00        - mov ecx,[eax+0000094C]
// ---------- INJECTING HERE ----------
popcapgame1.exe+1DC74: 8B 51 54                 - mov edx,[ecx+54]
// ---------- DONE INJECTING  ----------
popcapgame1.exe+1DC77: 52                       - push edx
popcapgame1.exe+1DC78: 8D 44 24 30              - lea eax,[esp+30]
popcapgame1.exe+1DC7C: 50                       - push eax
popcapgame1.exe+1DC7D: E8 6E DA 03 00           - call popcapgame1.exe+5B6F0
popcapgame1.exe+1DC82: C7 44 24 54 00 00 00 00  - mov [esp+54],00000000
popcapgame1.exe+1DC8A: 8B 0D E4 ED 72 00        - mov ecx,[popcapgame1.exe+32EDE4]
popcapgame1.exe+1DC90: 8B 11                    - mov edx,[ecx]
popcapgame1.exe+1DC92: 8B 52 1C                 - mov edx,[edx+1C]
popcapgame1.exe+1DC95: 8D 44 24 2C              - lea eax,[esp+2C]
popcapgame1.exe+1DC99: 50                       - push eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Coin"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>man_pointer_coin</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"ReadInformation"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : popcapgame1.exe
  Version: 
  Date   : 2022-07-22
  Author : Admin

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

aobscanmodule(INJECT,popcapgame1.exe,2B 45 24 89 44 24 10) // should be unique
alloc(newmem,1024,INJECT) // 分配 1024 字节个内存，用于代码注入
alloc(pointer_first_card_base,8,INJECT) // 动态分配内存，用于存放1个人造指针

// 注册全局符号
registersymbol(INJECT)
registersymbol(pointer_first_card_base) // 人造指针
registersymbol(is_remove_cooldown_enable) // 人造指针

// 声明标号
label(original_code)
label(return)
label(restore_reg)
label(is_remove_cooldown_enable)

// 注入代码段
newmem:
  pushfd // 保存所有标志位
  // push eax

  mov [pointer_first_card_base],ebp

  cmp byte ptr [is_remove_cooldown_enable],1
  jne restore_reg
  // 方法一 将冷却标志位置1（0：冷却未完成，1：冷却完成）
  mov byte [ebp+48],1
  // 方法二 一次补充满 CD 值
  // push eax // eax 压栈保存,为后续操作腾出一个寄存器
  // mov eax,[edi+28] // 将恢复所需的总 CD 值地址给寄存器
  // mov [edi+24],eax // 将寄存器中的地址给当前 CD 值

// 恢复临时使用的寄存器的值
restore_reg:
  // pop eax
  popfd  // 还原所有标志位
  jmp original_code

original_code:
  sub eax,[ebp+24]
  mov [esp+10],eax
  jmp return

  is_remove_cooldown_enable:
    dd (int)0

INJECT:
  jmp newmem
  nop 2
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 2B 45 24 89 44 24 10

// 注销全局符号
unregistersymbol(INJECT)
unregistersymbol(pointer_first_card_base)
// 释放内存
dealloc(newmem)
dealloc(pointer_first_card_base)

{
// ORIGINAL CODE - INJECTION POINT: popcapgame1.exe+968F3

popcapgame1.exe+968DA: 80 7D 48 00        - cmp byte ptr [ebp+48],00
popcapgame1.exe+968DE: 56                 - push esi
popcapgame1.exe+968DF: 57                 - push edi
popcapgame1.exe+968E0: 75 24              - jne popcapgame1.exe+96906
popcapgame1.exe+968E2: 83 7D 28 00        - cmp dword ptr [ebp+28],00
popcapgame1.exe+968E6: 75 04              - jne popcapgame1.exe+968EC
popcapgame1.exe+968E8: D9 E8              - fld1 
popcapgame1.exe+968EA: EB 16              - jmp popcapgame1.exe+96902
popcapgame1.exe+968EC: 8B 45 28           - mov eax,[ebp+28]
popcapgame1.exe+968EF: 89 44 24 18        - mov [esp+18],eax
// ---------- INJECTING HERE ----------
popcapgame1.exe+968F3: 2B 45 24           - sub eax,[ebp+24]
// ---------- DONE INJECTING  ----------
popcapgame1.exe+968F6: 89 44 24 10        - mov [esp+10],eax
popcapgame1.exe+968FA: DB 44 24 10        - fild dword ptr [esp+10]
popcapgame1.exe+968FE: DA 74 24 18        - fidiv dword ptr [esp+18]
popcapgame1.exe+96902: D9 5C 24 14        - fstp dword ptr [esp+14]
popcapgame1.exe+96906: 83 7D 3C 00        - cmp dword ptr [ebp+3C],00
popcapgame1.exe+9690A: 0F 8E EF 00 00 00  - jng popcapgame1.exe+969FF
popcapgame1.exe+96910: 8B 45 14           - mov eax,[ebp+14]
popcapgame1.exe+96913: D9 45 44           - fld dword ptr [ebp+44]
popcapgame1.exe+96916: F7 D8              - neg eax
popcapgame1.exe+96918: 89 44 24 10        - mov [esp+10],eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"pointer_first_card_base"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pointer_first_card_base</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"is_remove_cooldown_enable"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>is_remove_cooldown_enable</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>-- debug 检测配置
if os.getenv('LOCAL_LUA_DEBUGGER_VSCODE') == '1' then
    require('lldebugger').start()
    require('lldebugger').start()
end

tb = getAddressList()

Script = {}
function Script:new(script_name, enable)
    local t = {}
    setmetatable(t, self)
    self.__index = self
    t.enable = enable or false
    if script_name == 'sun_find_pointer' then
        t.script = tb.getMemoryRecordByDescription('SunFindPointer')
    elseif script_name == 'coin_find_pointer' then
        t.script = tb.getMemoryRecordByDescription('CoinFindPointer')
    elseif script_name == 'read_information' then
        t.script = tb.getMemoryRecordByDescription('ReadInformation')
    else
        error('请填写有效的脚本名称')
    end
    return t
end

--- 使能脚本
function Script:Enable()
    self.enable = true
    self.script.Active = true
end

--- 关闭脚本
function Script:Disable()
    self.enable = false
    self.script.Active = false
end

--- 翻转脚本使能状态
function Script:Toggle()
    if self.enable then
        self:Disable()
    else
        self:Enable()
    end
end

function CETrainer_SunWriteClick(sender)
    writeInteger('[pointer_sun]', 2000)
end

function CETrainer_CoinWriteClick(sender)
    writeInteger('[pointer_coin]', 2000)
end

function CETrainer_EnableSunChange(sender)
    script_sun:Toggle()
end

function CETrainer_EnableCoinChange(sender)
    script_coin:Toggle()
end

function CETrainer_ReadInformationChange(sender)
  script_read_information:Toggle()
end

function CETrainer_EnableRemoveCooldownChange(sender)
  if 'is_remove_cooldown_enable' == 1 then
    writeSmallInteger('is_remove_cooldown_enable', 0)
  else
    writeSmallInteger('is_remove_cooldown_enable', 1)
  end
end

script_sun = Script:new('sun_find_pointer')
script_coin = Script:new('coin_find_pointer')
script_read_information = Script:new('read_information')

</LuaScript>
</CheatTable>
